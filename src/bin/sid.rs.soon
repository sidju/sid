use sid::*;

use clap::Parser;

#[derive(Parser)]
#[command(version)]
struct CliArgs {
  /// Path to file to execute code from or `-` for stdin
  file: String,
}
fn main() {
  let cli = CliArgs::parse();
  // Create a iterator over the file
  // Parse that iterator into Vec<TemplateValue>
  let parsed = parse_program_sequence(iter, None);
  // Create the global scope, with built-in functions and constants
  // (Implementations of this don't yet exist)
  let mut global_scope = HashMap::new();
  let built_in_functions = HashMap::new();
  // Render that Vec<TemplateValue> as a Substack
  let rendered = render_template(
    Template::substack(parsed),
    Vec::new(), // Current stack, not applicable
    HashMap::new(), // Current local scope, not applicable
    &global_scope,
  );
  // The rendering output is the whole data stack initially
  // And an invoke the whole program
  let program_stack = vec![ProgramValue::Invoke];
  let mut data_stack = rendered;
  interpret(
    program_stack,
    &mut data_stack,
    global_scope,
    &built_in_functions,
  )
}
